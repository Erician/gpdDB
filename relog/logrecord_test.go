package relog

import (
	"testing"

	"github.com/erician/gpdDB/utils/byteutil"

	"github.com/erician/gpdDB/common/gpdconst"
)

func TestToBytes(t *testing.T) {
	var tc []LogRecord
	var ex [][]byte

	blkNum := int64(1)
	key := "ab"
	value := "a"

	tc = append(tc, LogRecord{gpdconst.GET, blkNum, key, value, nil})
	ex = append(ex, []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00,
		0x61, 0x62,
		0x01, 0x00,
		0x61})

	tc = append(tc, LogRecord{gpdconst.PUT, blkNum, "", value, nil})
	ex = append(ex, []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
		0x01, 0x00,
		0x61})

	tc = append(tc, LogRecord{gpdconst.DELETE, blkNum, "", "", nil})
	ex = append(ex, []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
		0x00, 0x00})

	tc = append(tc, LogRecord{gpdconst.CHECKPOINT, 0, "", "", nil})
	ex = append(ex, []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03})

	tc = append(tc, LogRecord{gpdconst.ALLOCATE, blkNum, "", "", nil})
	ex = append(ex, []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	lsn := int64(1)
	for i := range tc {
		result, err := tc[i].ToBytes(lsn)
		if err != nil {
			t.Error("expected: ", nil, "not: ", err)
		}
		if c := byteutil.ByteCmp(result, ex[i]); c != 0 {
			t.Error("expected: ", ex[i], "not: ", result)
		}
	}
}
