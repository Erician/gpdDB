package relog

import (
	"testing"

	"github.com/erician/gpdDB/utils/byteutil"
)

func TestToBytes(t *testing.T) {
	var tc []LogRecord
	var ex [][]byte

	blkNum := int64(1)
	key := "ab"
	value := "a"

	tc = append(tc, NewLogRecordUserOpGet(blkNum, key, value))
	ex = append(ex, []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02, 0x00,
		0x61, 0x62,
		0x01, 0x00,
		0x61})

	tc = append(tc, NewLogRecordUserOpPut(blkNum, "", value))
	ex = append(ex, []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
		0x01, 0x00,
		0x61})

	tc = append(tc, NewLogRecordUserOpDelete(blkNum, "", ""))
	ex = append(ex, []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x02,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00,
		0x00, 0x00})

	tc = append(tc, NewLogRecordCheckpoint())
	ex = append(ex, []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x03})

	tc = append(tc, NewLogRecordAllocate(blkNum))
	ex = append(ex, []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x04,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00})

	tc = append(tc, NewLogRecordSetField(blkNum, 0xff, value))
	ex = append(ex, []byte{0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x05,
		0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0xff, 0x00,
		0x01, 0x00,
		0x61})

	lsn := int64(1)
	for i := range tc {
		result := tc[i].ToBytes(lsn)
		if c := byteutil.ByteCmp(result, ex[i]); c != 0 {
			t.Error("expected: ", ex[i], "not: ", result)
		}
	}
}
